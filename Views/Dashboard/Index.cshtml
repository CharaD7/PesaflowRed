@using System.Text.Json
@model PesaflowRed.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="dashboard-container">
    <div class="header">
        <h1>Welcome to Your Dashboard</h1>
        <a href="@Url.Action("Logout", "Auth")" class="logout-button">Logout</a>
    </div>
    
    <div class="dashboard-content">
        <div class="welcome-message">
            <h2>Successfully Logged In!</h2>
            <p>You can now access all the features of the application.</p>
        </div>

        <div class="auth-details-section">
            <h3>Authentication Details</h3>
            <div class="parameter-grid">
                <div class="parameter-item">
                    <label>Client ID:</label>
                    <div class="parameter-value">
                        <code id="clientId">@Model.ClientId</code>
                        <button class="copy-button" onclick="copyToClipboard('clientId')">Copy</button>
                    </div>
                </div>
                
                <div class="parameter-item">
                    <label>Client Secret:</label>
                    <div class="parameter-value">
                        <code id="clientSecret">@Model.ClientSecret</code>
                        <button class="copy-button" onclick="copyToClipboard('clientSecret')">Copy</button>
                    </div>
                </div>

                <div class="parameter-item">
                    <label>Auth Code:</label>
                    <div class="parameter-value">
                        <code id="authCode">@Model.AuthCode</code>
                        <button class="copy-button" onclick="copyToClipboard('authCode')">Copy</button>
                    </div>
                </div>

                <div class="parameter-item">
                    <label>Grant Type:</label>
                    <div class="parameter-value">
                        <code>authorization_code</code>
                    </div>
                </div>

                <div class="parameter-item">
                    <label>Redirect URI:</label>
                    <div class="parameter-value">
                        <code id="redirectUri">@Model.RedirectUri</code>
                        <button class="copy-button" onclick="copyToClipboard('redirectUri')">Copy</button>
                    </div>
                </div>
            </div>

            <!-- Add this after the parameter-grid div and before the access-token-section -->
            <div class="request-details-section">
    <h4>POST Request Details</h4>
    <div class="request-container">
        <div class="request-info">
            <div class="request-header">
                <span class="method">POST</span>
                <span class="url" id="requestUrl">@(Model.LastRequest?.Url ?? "No request made yet")</span>
            </div>
            <div class="request-body">
                <h5>Request Parameters</h5>
                <pre id="requestParams">@(Model.LastRequest?.Parameters != null ? 
                    JsonSerializer.Serialize(Model.LastRequest.Parameters, new JsonSerializerOptions { WriteIndented = true }) 
                    : "No request made yet")</pre>
                
                <h5>Request Headers</h5>
                <pre id="requestHeaders">@(Model.LastRequest?.Headers != null ? 
                    JsonSerializer.Serialize(Model.LastRequest.Headers, new JsonSerializerOptions { WriteIndented = true })
                    : "No request made yet")</pre>
            </div>
        </div>
    </div>
</div>

<div class="access-token-section">
    <h4>Access Token</h4>
    <div class="token-container">
        <code id="accessToken">@(Model.AccessToken ?? "No access token available")</code>
        @if (!string.IsNullOrEmpty(Model.AccessToken))
        {
            <button class="copy-button" onclick="copyToClipboard('accessToken')">Copy</button>
        }
    </div>
    @if (TempData["TokenError"] != null)
    {
        <div class="error-details">
            <p>‚ùå @TempData["TokenError"]</p>
        </div>
    }
</div>
        </div>
    </div>
</div>

<div class="user-info-section">
    <h4>User Information</h4>
    <form id="userInfoForm" class="user-info-form" onsubmit="getUserInfo(event, document.getElementById('userId').value, document.getElementById('userType').value)">
        <div class="input-group mb-3">
            <input type="text" 
                   id="userId" 
                   class="form-control" 
                   placeholder="Enter User ID (optional)"
                   aria-label="User ID">
            <input type="text" 
                   id="userType" 
                   class="form-control" 
                   placeholder="Enter User Type (citizen/alien/alien)"
                   aria-label="User ID Type">
            <button type="submit" class="btn btn-primary">
                Get User Info
            </button>
        </div>
    </form>
    <!-- Add this right after the form and before the json-viewer div in the user-info-section -->
    <div class="curl-command">
        <div class="curl-header">
            <span class="curl-title">cURL Command</span>
            <button onclick="copyCurl()" class="copy-curl-btn">Copy</button>
        </div>
        <pre id="curlCommand" class="curl-content">// cURL command will appear here</pre>
    </div>
    <div class="json-viewer">
        <div class="json-header">
            <span class="json-title">Response</span>
            <button onclick="copyJson()" class="copy-json-btn">Copy</button>
        </div>
        <pre id="jsonViewer" class="json-content">// User info will appear here</pre>
    </div>
</div>

<style>
.json-viewer {
    background-color: #1e1e1e;
    border-radius: 6px;
    overflow: hidden;
    margin-top: 20px;
}

.json-header {
    background-color: #2d2d2d;
    padding: 8px 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.json-title {
    color: #e0e0e0;
    font-family: 'Consolas', monospace;
    font-size: 0.9em;
}

.copy-json-btn {
    background-color: #404040;
    color: #e0e0e0;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    cursor: pointer;
    transition: background-color 0.2s;
}

.copy-json-btn:hover {
    background-color: #505050;
}

.json-content {
    margin: 0;
    padding: 16px;
    background-color: #1e1e1e;
    color: #d4d4d4;
    font-family: 'Consolas', monospace;
    font-size: 0.9em;
    overflow-x: auto;
    min-height: 100px;
}

.string { color: #ce9178; }
.number { color: #b5cea8; }
.boolean { color: #569cd6; }
.null { color: #569cd6; }
.key { color: #9cdcfe; }
</style>

<style>
.user-info-form {
    margin-bottom: 1rem;
}

.input-group {
    display: flex;
    gap: 10px;
}

.input-group .form-control {
    flex: 1;
    padding: 8px;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    font-size: 1rem;
}

.input-group .form-control:focus {
    outline: none;
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
}

.user-info-container pre {
    background-color: white;
    padding: 15px;
    border-radius: 4px;
    border: 1px solid #dee2e6;
    overflow-x: auto;
    margin-top: 10px;
    min-height: 100px;
}

.user-info-container pre.success {
    border-color: #28a745;
}

.user-info-container pre.error {
    border-color: #dc3545;
}

.mb-3 {
    margin-bottom: 1rem;
}
</style>

<style>
    .btn-primary {
        background-color: #4299e1;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background-color: #3182ce;
        transform: translateY(-1px);
    }

    .btn-primary:active {
        transform: translateY(0);
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .logout-button {
        padding: 10px 20px;
        background-color: #dc3545;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s;
    }

    .logout-button:hover {
        background-color: #c82333;
        color: white;
        text-decoration: none;
    }

    .parameter-grid {
        display: grid;
        gap: 20px;
        margin: 20px 0;
    }

    .parameter-item {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
    }

    .parameter-item label {
        font-weight: bold;
        margin-bottom: 5px;
        display: block;
    }

    .parameter-value {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .parameter-value code {
        flex: 1;
        padding: 8px;
        background-color: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        word-break: break-all;
    }

    .copy-button {
        padding: 6px 12px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .copy-button:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    .access-token-section {
        margin-top: 30px;
    }

    .token-container {
        display: flex;
        gap: 10px;
        align-items: center;
        margin: 10px 0;
    }

    .token-status {
        margin-top: 10px;
        font-size: 0.9rem;
    }

    .token-status.error {
        color: #dc3545;
    }

    .token-status.success {
        color: #28a745;
    }

    .error-details {
        background-color: #fff3f3;
        padding: 15px;
        border-radius: 5px;
        border: 1px solid #ffcdd2;
    }

    .error-details p {
        margin: 5px 0;
    }

    .error-details details {
        margin-top: 10px;
    }

    .error-details pre {
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 4px;
        overflow-x: auto;
        font-size: 0.85em;
    }

    .success-message {
        background-color: #f0fff0;
        padding: 15px;
        border-radius: 5px;
        border: 1px solid #c3e6cb;
    }

    .success-message p {
        margin: 5px 0;
        color: #155724;
    }

    .request-details-section {
    margin-top: 30px;
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.request-container {
    background-color: white;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    overflow: hidden;
}

.request-header {
    padding: 15px;
    background-color: #343a40;
    color: white;
    display: flex;
    gap: 10px;
    align-items: center;
}

.method {
    background-color: #28a745;
    padding: 4px 8px;
    border-radius: 4px;
    font-weight: bold;
    font-family: monospace;
}

.url {
    font-family: monospace;
    word-break: break-all;
}

.request-body {
    padding: 15px;
}

.request-body h5 {
    margin: 10px 0;
    color: #495057;
}

.request-body pre {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 4px;
    overflow-x: auto;
    margin: 10px 0;
    font-size: 0.9em;
    border: 1px solid #dee2e6;
}

.user-info-section {
    margin-top: 30px;
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 8px;
    border: 1px solid #dee2e6;
}

.user-info-container pre {
    background-color: white;
    padding: 15px;
    border-radius: 4px;
    border: 1px solid #dee2e6;
    overflow-x: auto;
    margin-top: 10px;
}

.user-info-container pre.success {
    border-color: #28a745;
}

.user-info-container pre.error {
    border-color: #dc3545;
}
</style>

<style>
.curl-command {
    background-color: #1e1e1e;
    border-radius: 6px;
    overflow: hidden;
    margin: 15px 0;
}

.curl-header {
    background-color: #2d2d2d;
    padding: 8px 16px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.curl-title {
    color: #e0e0e0;
    font-family: 'Consolas', monospace;
    font-size: 0.9em;
}

.copy-curl-btn {
    background-color: #404040;
    color: #e0e0e0;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.8em;
    cursor: pointer;
    transition: background-color 0.2s;
}

.copy-curl-btn:hover {
    background-color: #505050;
}

.curl-content {
    margin: 0;
    padding: 16px;
    background-color: #1e1e1e;
    color: #d4d4d4;
    font-family: 'Consolas', monospace;
    font-size: 0.9em;
    overflow-x: auto;
    white-space: pre-wrap;
    word-break: break-all;
}
</style>

<script>
function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    navigator.clipboard.writeText(element.textContent).then(() => {
        const button = element.nextElementSibling;
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        setTimeout(() => {
            button.textContent = originalText;
        }, 2000);
    });
}

async function getAccessToken() {
    try {
        const tokenElement = document.getElementById('accessToken');
        const statusElement = document.getElementById('tokenStatus');
        const copyButton = document.getElementById('copyTokenButton');

        const response = await fetch('/get-access-token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            try {
                if (data.access_token) {  // Changed to match the response format
                    tokenElement.textContent = data.access_token;
                    statusElement.innerHTML = `
                        <div class="success-message">
                            <p>‚úÖ Access token retrieved successfully!</p>
                            <p>Status Code: ${data.statusCode}</p>
                            <p>${data.message}</p>
                        </div>`;
                    statusElement.className = 'token-status success';
                    copyButton.disabled = false;
                    
                    // Update request details
                    document.getElementById('requestUrl').textContent = data.request.url;
                    document.getElementById('requestParams').textContent = 
                        JSON.stringify(data.request.parameters, null, 2);
                    document.getElementById('requestHeaders').textContent = 
                        JSON.stringify(data.request.headers, null, 2);
                } else {
                    throw new Error('No access_token in response');
                }
            } catch (parseError) {
                // ... (error handling)
            }
        } else {
            // ... (error handling)
        }
    } catch (error) {
        // ... (error handling)
    }
}

// Call getAccessToken when the page loads
// document.addEventListener('DOMContentLoaded', getAccessToken);
</script>

<script>
function syntaxHighlight(json) {
    if (typeof json !== 'string') {
        json = JSON.stringify(json, null, 2);
    }
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
        let cls = 'number';
        if (/^"/.test(match)) {
            if (/:$/.test(match)) {
                cls = 'key';
            } else {
                cls = 'string';
            }
        } else if (/true|false/.test(match)) {
            cls = 'boolean';
        } else if (/null/.test(match)) {
            cls = 'null';
        }
        return '<span class="' + cls + '">' + match + '</span>';
    });
}

function copyCurl() {
    const curlCommand = document.getElementById('curlCommand').textContent;
    navigator.clipboard.writeText(curlCommand)
        .then(() => {
            const copyBtn = document.querySelector('.copy-curl-btn');
            const originalText = copyBtn.textContent;
            copyBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyBtn.textContent = originalText;
            }, 2000);
        });
}

function copyJson() {
    const jsonContent = document.getElementById('jsonViewer').textContent.trim();

    if (!jsonContent || jsonContent.includes("// User info will appear here")) {
        alert("No JSON data available to copy.");
        return;
    }

    navigator.clipboard.writeText(jsonContent)
        .then(() => {
            const copyBtn = document.querySelector('.copy-json-btn');
            const originalText = copyBtn.textContent;
            copyBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyBtn.textContent = originalText;
            }, 2000);
        })
        .catch(err => console.error("Failed to copy JSON:", err));
}


async function getUserInfo(event = null, userId = null, userType = null) {
    event.preventDefault();

    // Get the raw text content from the HTML element
    const rawResponse = document.getElementById('accessToken').textContent.trim();
    const baseUrl = 'https://sso.pesaflow.com';

    if (!rawResponse || rawResponse.includes('No access token')) {
        alert('Please get an access token first');
        return;
    }

    try {
        // Parse JSON correctly
        const parsedData = JSON.parse(rawResponse);

        // Ensure the response contains the access_token
        if (!parsedData.access_token) {
            alert('Invalid access token format');
            return;
        }

        const accessToken = parsedData.access_token;

        // Construct the API request URL
        let url = `${baseUrl}/api/user-info?access_token=${encodeURIComponent(accessToken)}`;
        // If userId and userType are provided, modify the request URL for /api/find-user
        if (userId && userType) {
            url = `${baseUrl}/api/find-user?access_token=${encodeURIComponent(accessToken)}&id_number=${encodeURIComponent(userId)}&id_type=${encodeURIComponent(userType)}`;
        }

        // Display loading indicator
        const jsonViewer = document.getElementById('jsonViewer');
        jsonViewer.innerHTML = 'Loading...';

        // Fetch user info
        const response = await fetch(url);
        // console.log(`Response: ${response.status} ${response.statusText}`)
        
        const data = await response.json();
        // console.log(`Data: ${JSON.stringify(data, null, 2)}`)

        // Update the cURL command with the correct token
        updateCurlCommand(accessToken);

        // Display formatted response
        jsonViewer.innerHTML = syntaxHighlight(JSON.stringify(data, null, 2));
    } catch (error) {
        console.error("Error:", error);
        document.getElementById('jsonViewer').innerHTML = syntaxHighlight(JSON.stringify({
            error: "Failed to fetch user info",
            details: error.message
        }, null, 2));
    }
}

// without userId
function updateCurlCommand(accessToken) {
    const baseUrl = 'https://sso.pesaflow.com/api/user-info';
    const url = `${baseUrl}?access_token=${encodeURIComponent(accessToken)}`;
    console.log(`URL: ${url}`);

    const curlCommand = `curl -X GET "${url}" \\
     -H "Content-Type: application/json"`;

    document.getElementById('curlCommand').textContent = curlCommand;
}
</script>